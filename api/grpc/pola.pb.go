// Copyright (c) 2022 NTT Communications Corporation
//
// This software is released under the MIT License.
// see https://github.com/nttcom/pola/blob/main/LICENSE

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: pola.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SRPolicyType int32

const (
	SRPolicyType_EXPLICIT SRPolicyType = 0
	SRPolicyType_DYNAMIC  SRPolicyType = 1
)

// Enum value maps for SRPolicyType.
var (
	SRPolicyType_name = map[int32]string{
		0: "EXPLICIT",
		1: "DYNAMIC",
	}
	SRPolicyType_value = map[string]int32{
		"EXPLICIT": 0,
		"DYNAMIC":  1,
	}
)

func (x SRPolicyType) Enum() *SRPolicyType {
	p := new(SRPolicyType)
	*p = x
	return p
}

func (x SRPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pola_proto_enumTypes[0].Descriptor()
}

func (SRPolicyType) Type() protoreflect.EnumType {
	return &file_pola_proto_enumTypes[0]
}

func (x SRPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRPolicyType.Descriptor instead.
func (SRPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{0}
}

type SessionState int32

const (
	SessionState_DOWN SessionState = 0
	SessionState_UP   SessionState = 1
)

// Enum value maps for SessionState.
var (
	SessionState_name = map[int32]string{
		0: "DOWN",
		1: "UP",
	}
	SessionState_value = map[string]int32{
		"DOWN": 0,
		"UP":   1,
	}
)

func (x SessionState) Enum() *SessionState {
	p := new(SessionState)
	*p = x
	return p
}

func (x SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_pola_proto_enumTypes[1].Descriptor()
}

func (SessionState) Type() protoreflect.EnumType {
	return &file_pola_proto_enumTypes[1]
}

func (x SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionState.Descriptor instead.
func (SessionState) EnumDescriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{1}
}

type MetricType int32

const (
	MetricType_IGP      MetricType = 0
	MetricType_TE       MetricType = 1
	MetricType_DELAY    MetricType = 2
	MetricType_HOPCOUNT MetricType = 3
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "IGP",
		1: "TE",
		2: "DELAY",
		3: "HOPCOUNT",
	}
	MetricType_value = map[string]int32{
		"IGP":      0,
		"TE":       1,
		"DELAY":    2,
		"HOPCOUNT": 3,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_pola_proto_enumTypes[2].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_pola_proto_enumTypes[2]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{2}
}

type Segment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sid           string                 `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	SidStructure  string                 `protobuf:"bytes,2,opt,name=sidStructure,proto3" json:"sidStructure,omitempty"`
	LocalAddr     string                 `protobuf:"bytes,3,opt,name=localAddr,proto3" json:"localAddr,omitempty"`
	RemoteAddr    string                 `protobuf:"bytes,4,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_pola_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{0}
}

func (x *Segment) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *Segment) GetSidStructure() string {
	if x != nil {
		return x.SidStructure
	}
	return ""
}

func (x *Segment) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *Segment) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

type SRPolicy struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PCEPSessionAddr []byte                 `protobuf:"bytes,1,opt,name=PCEPSessionAddr,proto3" json:"PCEPSessionAddr,omitempty"`
	SrcAddr         []byte                 `protobuf:"bytes,2,opt,name=srcAddr,proto3" json:"srcAddr,omitempty"`
	DstAddr         []byte                 `protobuf:"bytes,3,opt,name=dstAddr,proto3" json:"dstAddr,omitempty"`
	SrcRouterID     string                 `protobuf:"bytes,4,opt,name=srcRouterID,proto3" json:"srcRouterID,omitempty"`
	DstRouterID     string                 `protobuf:"bytes,5,opt,name=dstRouterID,proto3" json:"dstRouterID,omitempty"`
	Color           uint32                 `protobuf:"varint,6,opt,name=color,proto3" json:"color,omitempty"`
	Preference      uint32                 `protobuf:"varint,7,opt,name=preference,proto3" json:"preference,omitempty"`
	PolicyName      string                 `protobuf:"bytes,8,opt,name=policyName,proto3" json:"policyName,omitempty"`
	Type            SRPolicyType           `protobuf:"varint,9,opt,name=type,proto3,enum=pb.SRPolicyType" json:"type,omitempty"`
	SegmentList     []*Segment             `protobuf:"bytes,10,rep,name=segmentList,proto3" json:"segmentList,omitempty"`
	Metric          MetricType             `protobuf:"varint,11,opt,name=metric,proto3,enum=pb.MetricType" json:"metric,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SRPolicy) Reset() {
	*x = SRPolicy{}
	mi := &file_pola_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SRPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRPolicy) ProtoMessage() {}

func (x *SRPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRPolicy.ProtoReflect.Descriptor instead.
func (*SRPolicy) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{1}
}

func (x *SRPolicy) GetPCEPSessionAddr() []byte {
	if x != nil {
		return x.PCEPSessionAddr
	}
	return nil
}

func (x *SRPolicy) GetSrcAddr() []byte {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

func (x *SRPolicy) GetDstAddr() []byte {
	if x != nil {
		return x.DstAddr
	}
	return nil
}

func (x *SRPolicy) GetSrcRouterID() string {
	if x != nil {
		return x.SrcRouterID
	}
	return ""
}

func (x *SRPolicy) GetDstRouterID() string {
	if x != nil {
		return x.DstRouterID
	}
	return ""
}

func (x *SRPolicy) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *SRPolicy) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *SRPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *SRPolicy) GetType() SRPolicyType {
	if x != nil {
		return x.Type
	}
	return SRPolicyType_EXPLICIT
}

func (x *SRPolicy) GetSegmentList() []*Segment {
	if x != nil {
		return x.SegmentList
	}
	return nil
}

func (x *SRPolicy) GetMetric() MetricType {
	if x != nil {
		return x.Metric
	}
	return MetricType_IGP
}

type CreateSRPolicyInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SRPolicy      *SRPolicy              `protobuf:"bytes,1,opt,name=SRPolicy,proto3" json:"SRPolicy,omitempty"`
	Asn           uint32                 `protobuf:"varint,2,opt,name=asn,proto3" json:"asn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSRPolicyInput) Reset() {
	*x = CreateSRPolicyInput{}
	mi := &file_pola_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSRPolicyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSRPolicyInput) ProtoMessage() {}

func (x *CreateSRPolicyInput) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSRPolicyInput.ProtoReflect.Descriptor instead.
func (*CreateSRPolicyInput) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSRPolicyInput) GetSRPolicy() *SRPolicy {
	if x != nil {
		return x.SRPolicy
	}
	return nil
}

func (x *CreateSRPolicyInput) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

type DeleteSRPolicyInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SRPolicy      *SRPolicy              `protobuf:"bytes,1,opt,name=SRPolicy,proto3" json:"SRPolicy,omitempty"`
	Asn           uint32                 `protobuf:"varint,2,opt,name=asn,proto3" json:"asn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSRPolicyInput) Reset() {
	*x = DeleteSRPolicyInput{}
	mi := &file_pola_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSRPolicyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSRPolicyInput) ProtoMessage() {}

func (x *DeleteSRPolicyInput) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSRPolicyInput.ProtoReflect.Descriptor instead.
func (*DeleteSRPolicyInput) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteSRPolicyInput) GetSRPolicy() *SRPolicy {
	if x != nil {
		return x.SRPolicy
	}
	return nil
}

func (x *DeleteSRPolicyInput) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

type RequestStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSuccess     bool                   `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestStatus) Reset() {
	*x = RequestStatus{}
	mi := &file_pola_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatus) ProtoMessage() {}

func (x *RequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatus.ProtoReflect.Descriptor instead.
func (*RequestStatus) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{4}
}

func (x *RequestStatus) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type Session struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          []byte                 `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	State         SessionState           `protobuf:"varint,2,opt,name=State,proto3,enum=pb.SessionState" json:"State,omitempty"`
	Caps          []string               `protobuf:"bytes,3,rep,name=Caps,proto3" json:"Caps,omitempty"`
	IsSynced      bool                   `protobuf:"varint,4,opt,name=IsSynced,proto3" json:"IsSynced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_pola_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{5}
}

func (x *Session) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *Session) GetState() SessionState {
	if x != nil {
		return x.State
	}
	return SessionState_DOWN
}

func (x *Session) GetCaps() []string {
	if x != nil {
		return x.Caps
	}
	return nil
}

func (x *Session) GetIsSynced() bool {
	if x != nil {
		return x.IsSynced
	}
	return false
}

type SessionList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*Session             `protobuf:"bytes,1,rep,name=Sessions,proto3" json:"Sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionList) Reset() {
	*x = SessionList{}
	mi := &file_pola_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionList) ProtoMessage() {}

func (x *SessionList) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionList.ProtoReflect.Descriptor instead.
func (*SessionList) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{6}
}

func (x *SessionList) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type SRPolicyList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SRPolicies    []*SRPolicy            `protobuf:"bytes,1,rep,name=SRPolicies,proto3" json:"SRPolicies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SRPolicyList) Reset() {
	*x = SRPolicyList{}
	mi := &file_pola_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SRPolicyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRPolicyList) ProtoMessage() {}

func (x *SRPolicyList) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRPolicyList.ProtoReflect.Descriptor instead.
func (*SRPolicyList) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{7}
}

func (x *SRPolicyList) GetSRPolicies() []*SRPolicy {
	if x != nil {
		return x.SRPolicies
	}
	return nil
}

type LsPrefix struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        string                 `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	SidIndex      uint32                 `protobuf:"varint,2,opt,name=sidIndex,proto3" json:"sidIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LsPrefix) Reset() {
	*x = LsPrefix{}
	mi := &file_pola_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LsPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsPrefix) ProtoMessage() {}

func (x *LsPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsPrefix.ProtoReflect.Descriptor instead.
func (*LsPrefix) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{8}
}

func (x *LsPrefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *LsPrefix) GetSidIndex() uint32 {
	if x != nil {
		return x.SidIndex
	}
	return 0
}

type Metric struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          MetricType             `protobuf:"varint,1,opt,name=type,proto3,enum=pb.MetricType" json:"type,omitempty"`
	Value         uint32                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_pola_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{9}
}

func (x *Metric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_IGP
}

func (x *Metric) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type LsLink struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LocalRouterID  string                 `protobuf:"bytes,1,opt,name=localRouterID,proto3" json:"localRouterID,omitempty"`
	LocalASN       uint32                 `protobuf:"varint,2,opt,name=localASN,proto3" json:"localASN,omitempty"`
	LocalIP        string                 `protobuf:"bytes,3,opt,name=localIP,proto3" json:"localIP,omitempty"`
	RemoteRouterID string                 `protobuf:"bytes,4,opt,name=remoteRouterID,proto3" json:"remoteRouterID,omitempty"`
	RemoteASN      uint32                 `protobuf:"varint,5,opt,name=remoteASN,proto3" json:"remoteASN,omitempty"`
	RemoteIP       string                 `protobuf:"bytes,6,opt,name=remoteIP,proto3" json:"remoteIP,omitempty"`
	Metrics        []*Metric              `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty"`
	AdjSID         uint32                 `protobuf:"varint,8,opt,name=adjSID,proto3" json:"adjSID,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LsLink) Reset() {
	*x = LsLink{}
	mi := &file_pola_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LsLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsLink) ProtoMessage() {}

func (x *LsLink) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsLink.ProtoReflect.Descriptor instead.
func (*LsLink) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{10}
}

func (x *LsLink) GetLocalRouterID() string {
	if x != nil {
		return x.LocalRouterID
	}
	return ""
}

func (x *LsLink) GetLocalASN() uint32 {
	if x != nil {
		return x.LocalASN
	}
	return 0
}

func (x *LsLink) GetLocalIP() string {
	if x != nil {
		return x.LocalIP
	}
	return ""
}

func (x *LsLink) GetRemoteRouterID() string {
	if x != nil {
		return x.RemoteRouterID
	}
	return ""
}

func (x *LsLink) GetRemoteASN() uint32 {
	if x != nil {
		return x.RemoteASN
	}
	return 0
}

func (x *LsLink) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

func (x *LsLink) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *LsLink) GetAdjSID() uint32 {
	if x != nil {
		return x.AdjSID
	}
	return 0
}

type LsNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asn           uint32                 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	RouterID      string                 `protobuf:"bytes,2,opt,name=routerID,proto3" json:"routerID,omitempty"`
	IsisAreaID    string                 `protobuf:"bytes,3,opt,name=isisAreaID,proto3" json:"isisAreaID,omitempty"`
	Hostname      string                 `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	SrgbBegin     uint32                 `protobuf:"varint,5,opt,name=srgbBegin,proto3" json:"srgbBegin,omitempty"`
	SrgbEnd       uint32                 `protobuf:"varint,6,opt,name=srgbEnd,proto3" json:"srgbEnd,omitempty"`
	LsLinks       []*LsLink              `protobuf:"bytes,7,rep,name=lsLinks,proto3" json:"lsLinks,omitempty"`
	LsPrefixes    []*LsPrefix            `protobuf:"bytes,8,rep,name=lsPrefixes,proto3" json:"lsPrefixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LsNode) Reset() {
	*x = LsNode{}
	mi := &file_pola_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsNode) ProtoMessage() {}

func (x *LsNode) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsNode.ProtoReflect.Descriptor instead.
func (*LsNode) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{11}
}

func (x *LsNode) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *LsNode) GetRouterID() string {
	if x != nil {
		return x.RouterID
	}
	return ""
}

func (x *LsNode) GetIsisAreaID() string {
	if x != nil {
		return x.IsisAreaID
	}
	return ""
}

func (x *LsNode) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *LsNode) GetSrgbBegin() uint32 {
	if x != nil {
		return x.SrgbBegin
	}
	return 0
}

func (x *LsNode) GetSrgbEnd() uint32 {
	if x != nil {
		return x.SrgbEnd
	}
	return 0
}

func (x *LsNode) GetLsLinks() []*LsLink {
	if x != nil {
		return x.LsLinks
	}
	return nil
}

func (x *LsNode) GetLsPrefixes() []*LsPrefix {
	if x != nil {
		return x.LsPrefixes
	}
	return nil
}

type TED struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enable        bool                   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	LsNodes       []*LsNode              `protobuf:"bytes,2,rep,name=lsNodes,proto3" json:"lsNodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TED) Reset() {
	*x = TED{}
	mi := &file_pola_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TED) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TED) ProtoMessage() {}

func (x *TED) ProtoReflect() protoreflect.Message {
	mi := &file_pola_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TED.ProtoReflect.Descriptor instead.
func (*TED) Descriptor() ([]byte, []int) {
	return file_pola_proto_rawDescGZIP(), []int{12}
}

func (x *TED) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TED) GetLsNodes() []*LsNode {
	if x != nil {
		return x.LsNodes
	}
	return nil
}

var File_pola_proto protoreflect.FileDescriptor

var file_pola_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a,
	0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0xff, 0x02, 0x0a,
	0x08, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x43, 0x45,
	0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x50, 0x43, 0x45, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x51,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73,
	0x6e, 0x22, 0x51, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x52, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x53, 0x52, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x61, 0x73, 0x6e, 0x22, 0x2d, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x75, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x43, 0x61, 0x70, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x0b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x3e, 0x0a, 0x08, 0x4c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x42, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x06, 0x4c, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x53,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x53,
	0x4e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x53, 0x4e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x53,
	0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x12, 0x24, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6a, 0x53, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x64, 0x6a, 0x53, 0x49, 0x44, 0x22, 0xfe, 0x01, 0x0a, 0x06,
	0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x69, 0x73, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x67, 0x62, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x72, 0x67, 0x62, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x72, 0x67, 0x62, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x72, 0x67, 0x62, 0x45, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x6c, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x6c, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2c,
	0x0a, 0x0a, 0x6c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x0a, 0x6c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x03,
	0x54, 0x45, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x6c,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6c, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x2a, 0x29, 0x0a, 0x0c, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x01, 0x2a, 0x20, 0x0a, 0x0c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x01, 0x2a, 0x36,
	0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x47, 0x50, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x50, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x32, 0x88, 0x04, 0x0a, 0x0a, 0x50, 0x43, 0x45, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x2b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x54, 0x45, 0x44, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x45, 0x44, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x74, 0x74, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pola_proto_rawDescOnce sync.Once
	file_pola_proto_rawDescData []byte
)

func file_pola_proto_rawDescGZIP() []byte {
	file_pola_proto_rawDescOnce.Do(func() {
		file_pola_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pola_proto_rawDesc), len(file_pola_proto_rawDesc)))
	})
	return file_pola_proto_rawDescData
}

var file_pola_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pola_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pola_proto_goTypes = []any{
	(SRPolicyType)(0),           // 0: pb.SRPolicyType
	(SessionState)(0),           // 1: pb.SessionState
	(MetricType)(0),             // 2: pb.MetricType
	(*Segment)(nil),             // 3: pb.Segment
	(*SRPolicy)(nil),            // 4: pb.SRPolicy
	(*CreateSRPolicyInput)(nil), // 5: pb.CreateSRPolicyInput
	(*DeleteSRPolicyInput)(nil), // 6: pb.DeleteSRPolicyInput
	(*RequestStatus)(nil),       // 7: pb.RequestStatus
	(*Session)(nil),             // 8: pb.Session
	(*SessionList)(nil),         // 9: pb.SessionList
	(*SRPolicyList)(nil),        // 10: pb.SRPolicyList
	(*LsPrefix)(nil),            // 11: pb.LsPrefix
	(*Metric)(nil),              // 12: pb.Metric
	(*LsLink)(nil),              // 13: pb.LsLink
	(*LsNode)(nil),              // 14: pb.LsNode
	(*TED)(nil),                 // 15: pb.TED
	(*emptypb.Empty)(nil),       // 16: google.protobuf.Empty
}
var file_pola_proto_depIdxs = []int32{
	0,  // 0: pb.SRPolicy.type:type_name -> pb.SRPolicyType
	3,  // 1: pb.SRPolicy.segmentList:type_name -> pb.Segment
	2,  // 2: pb.SRPolicy.metric:type_name -> pb.MetricType
	4,  // 3: pb.CreateSRPolicyInput.SRPolicy:type_name -> pb.SRPolicy
	4,  // 4: pb.DeleteSRPolicyInput.SRPolicy:type_name -> pb.SRPolicy
	1,  // 5: pb.Session.State:type_name -> pb.SessionState
	8,  // 6: pb.SessionList.Sessions:type_name -> pb.Session
	4,  // 7: pb.SRPolicyList.SRPolicies:type_name -> pb.SRPolicy
	2,  // 8: pb.Metric.type:type_name -> pb.MetricType
	12, // 9: pb.LsLink.metrics:type_name -> pb.Metric
	13, // 10: pb.LsNode.lsLinks:type_name -> pb.LsLink
	11, // 11: pb.LsNode.lsPrefixes:type_name -> pb.LsPrefix
	14, // 12: pb.TED.lsNodes:type_name -> pb.LsNode
	5,  // 13: pb.PCEService.CreateSRPolicy:input_type -> pb.CreateSRPolicyInput
	5,  // 14: pb.PCEService.CreateSRPolicyWithoutLinkState:input_type -> pb.CreateSRPolicyInput
	6,  // 15: pb.PCEService.DeleteSRPolicy:input_type -> pb.DeleteSRPolicyInput
	6,  // 16: pb.PCEService.DeleteSRPolicyWithoutLinkState:input_type -> pb.DeleteSRPolicyInput
	16, // 17: pb.PCEService.GetSessionList:input_type -> google.protobuf.Empty
	16, // 18: pb.PCEService.GetSRPolicyList:input_type -> google.protobuf.Empty
	16, // 19: pb.PCEService.GetTED:input_type -> google.protobuf.Empty
	8,  // 20: pb.PCEService.DeleteSession:input_type -> pb.Session
	7,  // 21: pb.PCEService.CreateSRPolicy:output_type -> pb.RequestStatus
	7,  // 22: pb.PCEService.CreateSRPolicyWithoutLinkState:output_type -> pb.RequestStatus
	7,  // 23: pb.PCEService.DeleteSRPolicy:output_type -> pb.RequestStatus
	7,  // 24: pb.PCEService.DeleteSRPolicyWithoutLinkState:output_type -> pb.RequestStatus
	9,  // 25: pb.PCEService.GetSessionList:output_type -> pb.SessionList
	10, // 26: pb.PCEService.GetSRPolicyList:output_type -> pb.SRPolicyList
	15, // 27: pb.PCEService.GetTED:output_type -> pb.TED
	7,  // 28: pb.PCEService.DeleteSession:output_type -> pb.RequestStatus
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pola_proto_init() }
func file_pola_proto_init() {
	if File_pola_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pola_proto_rawDesc), len(file_pola_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pola_proto_goTypes,
		DependencyIndexes: file_pola_proto_depIdxs,
		EnumInfos:         file_pola_proto_enumTypes,
		MessageInfos:      file_pola_proto_msgTypes,
	}.Build()
	File_pola_proto = out.File
	file_pola_proto_goTypes = nil
	file_pola_proto_depIdxs = nil
}
