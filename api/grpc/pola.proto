// Copyright (c) 2022 NTT Communications Corporation
//
// This software is released under the MIT License.
// see https://github.com/nttcom/pola/blob/main/LICENSE

syntax = "proto3";

package pb;

option go_package = "github.com/nttcom/pola/api/grpc";

import "google/protobuf/empty.proto";

service PceService {
  rpc CreateSRPolicy (CreateSRPolicyInput) returns (RequestStatus) {};

  rpc CreateSRPolicyWithoutLinkState (CreateSRPolicyInput) returns (RequestStatus) {};

  rpc DeleteSRPolicy (DeleteSRPolicyInput) returns (RequestStatus) {};

  rpc DeleteSRPolicyWithoutLinkState (DeleteSRPolicyInput) returns (RequestStatus) {};

  rpc GetSessionList (google.protobuf.Empty) returns (SessionList) {};

  rpc GetSRPolicyList (google.protobuf.Empty) returns (SRPolicyList) {};

  rpc GetTed (google.protobuf.Empty) returns (Ted) {};

  rpc DeleteSession (Session) returns (RequestStatus) {};
}

message Segment {
    string sid = 1;
}

enum SRPolicyType {
    EXPLICIT = 0;
    DYNAMIC = 1;
}

message SRPolicy {
    bytes pcepSessionAddr = 1;
    bytes srcAddr = 2;
    bytes dstAddr = 3;
    string srcRouterID = 4;
    string dstRouterID = 5;
    uint32 color = 6;
    uint32 preference = 7;
    string policyName = 8;
    SRPolicyType type = 9;
    repeated Segment segmentList = 10;
    MetricType metric = 11;
}

message CreateSRPolicyInput {
    SRPolicy SRPolicy = 1;
    uint32 asn = 2;
}

message DeleteSRPolicyInput {
    SRPolicy SRPolicy = 1;
    uint32 asn = 2;
}

message RequestStatus {
    bool isSuccess = 1;
}

message Session {
    bytes Addr = 1;
}

message SessionList {
    repeated Session Sessions = 1; 
}

message SRPolicyList {
    repeated SRPolicy SRPolicies = 1;
}

message LsPrefix {
    string prefix = 1;
    uint32 sidIndex = 2;
}

enum MetricType {
    IGP = 0;
    TE = 1;
    DELAY = 2;
    HOPCOUNT = 3;
}

message Metric {
    MetricType type = 1;
    uint32 value = 2;
}

message LsLink {
    string localRouterID = 1;
    uint32 localAsn = 2;
    string localIP = 3;
    string remoteRouterID = 4;
    uint32 remoteAsn = 5;
    string remoteIP = 6;
    repeated Metric metrics = 7;
    uint32 adjSid = 8;
} 

message LsNode {
    uint32 asn = 1;
    string routerID = 2;
    string isisAreaID = 3;
    string hostname = 4;
    uint32 srgbBegin = 5;
    uint32 srgbEnd = 6;
    repeated LsLink lsLinks = 7;
    repeated LsPrefix lsPrefixes = 8;
}


message Ted {
    bool enable = 1;
    repeated  LsNode lsNodes = 2;
}
