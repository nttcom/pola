[{"body":"Getting Started The Getting Started page explains how to install the Pola PCE daemon and start the Stateful PCE service.\nTinet Example The Tinet Example page, a Pola PCE example network can be created with Tinet, a docker-based network simulator.\n","categories":"","description":"How to install, initialize, and start the Pola PCE daemon.\n","excerpt":"How to install, initialize, and start the Pola PCE daemon.\n","ref":"/pola/docs/installation/","tags":"","title":"Installation \u0026 Use"},{"body":"Common Header Header Format Format (RFC5440 Figure 7: PCEP Message Common Header)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Ver | Flags | Message-Type | Message-Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype CommonHeader struct { // RFC5440 6.1 Version uint8 Flag uint8 MessageType uint8 MessageLength uint16 } Fields Version: 1\nFlags: No flags are currently defined.\nMessage Types: The following message types are currently defined:\nconst ( // PCEP Message-Type (1byte) MT_RESERVED uint8 = 0x00 // RFC5440 MT_OPEN uint8 = 0x01 // RFC5440 MT_KEEPALIVE uint8 = 0x02 // RFC5440 MT_PCREQ uint8 = 0x03 // RFC5440 MT_PCREP uint8 = 0x04 // RFC5440 MT_NOTIFICATION uint8 = 0x05 // RFC5440 MT_ERROR uint8 = 0x06 // RFC5440 MT_CLOSE uint8 = 0x07 // RFC5440 MT_PCMONREQ uint8 = 0x08 // RFC5886 MT_PCMONREP uint8 = 0x09 // RFC5886 MT_REPORT uint8 = 0x0a // RFC8231 MT_UPDATE uint8 = 0x0b // RFC8281 MT_LSPINITREQ uint8 = 0x0c // RFC8281 MT_STARTTLS uint8 = 0x0d // RFC8253 ) Message-Length: total length of the PCEP message including the common header, expressed in bytes.\nPCEP Messages Open Message Message Format format (RFC5440 6.2)\n\u003cOpen Message\u003e::= \u003cCommon Header\u003e \u003cOPEN\u003e Message Type: 0x01\nKeepalive Message Message Format format (RFC5440 6.3)\n\u003cKeepalive Message\u003e::= \u003cCommon Header\u003e Message Type: 0x02\nError (PCErr) Message Message Format format (RFC5440 6.3)\n\u003cPCErr Message\u003e ::= \u003cCommon Header\u003e ( \u003cerror-obj-list\u003e [\u003cOpen\u003e] ) | \u003cerror\u003e [\u003cerror-list\u003e] \u003cerror-obj-list\u003e::=\u003cPCEP-ERROR\u003e[\u003cerror-obj-list\u003e] \u003cerror\u003e::=[\u003crequest-id-list\u003e | \u003cstateful-request-id-list\u003e] \u003cerror-obj-list\u003e \u003crequest-id-list\u003e::=\u003cRP\u003e[\u003crequest-id-list\u003e] \u003cstateful-request-id-list\u003e::=\u003cSRP\u003e[\u003cstateful-request-id-list\u003e] \u003cerror-list\u003e::=\u003cerror\u003e[\u003cerror-list\u003e] Message Type: 0x06\nClose Message Message Format format (RFC5440 6.8)\n\u003cClose Message\u003e::= \u003cCommon Header\u003e \u003cCLOSE\u003e Message Type: 0x07\nPCRpt Message Message Format format (RFC8231 6.1)\nThe format of the PCRpt message is as follows: \u003cPCRpt Message\u003e ::= \u003cCommon Header\u003e \u003cstate-report-list\u003e Where: \u003cstate-report-list\u003e ::= \u003cstate-report\u003e[\u003cstate-report-list\u003e] \u003cstate-report\u003e ::= [\u003cSRP\u003e] \u003cLSP\u003e \u003cpath\u003e Where: \u003cpath\u003e::= \u003cintended-path\u003e [\u003cactual-attribute-list\u003e\u003cactual-path\u003e] \u003cintended-attribute-list\u003e \u003cactual-attribute-list\u003e::=[\u003cBANDWIDTH\u003e] [\u003cmetric-list\u003e] Where: \u003cintended-path\u003e is represented by the ERO object defined in Section 7.9 of [RFC5440]. \u003cactual-attribute-list\u003e consists of the actual computed and signaled values of the \u003cBANDWIDTH\u003e and \u003cmetric-lists\u003e objects defined in [RFC5440]. \u003cactual-path\u003e is represented by the RRO object defined in Section 7.10 of [RFC5440]. \u003cintended-attribute-list\u003e is the attribute-list defined in Section 6.5 of [RFC5440] and extended by PCEP extensions. Message Type: 0x0a\nPCUpdate Message Message Format format (RFC8231 6.2)\nThe format of a PCUpd message is as follows: \u003cPCUpd Message\u003e ::= \u003cCommon Header\u003e \u003cupdate-request-list\u003e Where: \u003cupdate-request-list\u003e ::= \u003cupdate-request\u003e[\u003cupdate-request-list\u003e] \u003cupdate-request\u003e ::= \u003cSRP\u003e \u003cLSP\u003e \u003cpath\u003e Where: \u003cpath\u003e::= \u003cintended-path\u003e\u003cintended-attribute-list\u003e Where: \u003cintended-path\u003e is represented by the ERO object defined in Section 7.9 of [RFC5440]. \u003cintended-attribute-list\u003e is the attribute-list defined in [RFC5440] and extended by PCEP extensions. Message Type: 0x0a\nCommon Object Header Header Format Format (RFC5440 Figure 8: PCEP Common Object Header)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Object-Class | OT |Res|P|I| Object Length (bytes) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | // (Object body) // | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype CommonObjectHeader struct { // RFC5440 7.2 ObjectClass uint8 ObjectType uint8 ResFlags uint8 // MUST be set to zero PFlag bool // 0: optional, 1: MUST IFlag bool // 0: processed, 1: ignored ObjectLength uint16 } Fields Object-Class: identifies the PCEP object class.\nconst ( // PCEP Object-Class (1 byte) OC_RESERVED uint8 = 0x00 // RFC5440 OC_OPEN uint8 = 0x01 // RFC5440 OC_RP uint8 = 0x02 // RFC5440 OC_NO_PATH uint8 = 0x03 // RFC5440 OC_END_POINTS uint8 = 0x04 // RFC5440 OC_BANDWIDTH uint8 = 0x05 // RFC5440 OC_METRIC uint8 = 0x06 // RFC5440 OC_ERO uint8 = 0x07 // RFC5440 OC_RRO uint8 = 0x08 // RFC5440 OC_LSPA uint8 = 0x09 // RFC5440 OC_IRO uint8 = 0x0a // RFC5440 OC_SVRC uint8 = 0x0b // RFC5440 OC_NOTIFICATION uint8 = 0x0c // RFC5440 OC_PCEP_ERROR uint8 = 0x0d // RFC5440 OC_LOAD_BALANCING uint8 = 0x0e // RFC5440 OC_CLOSE uint8 = 0x0f // RFC5440 OC_PATH_KEY uint8 = 0x10 // RFC5520 OC_XRO uint8 = 0x11 // RFC5521 // 0x12 is Unassigned OC_MONITORING uint8 = 0x13 // RFC5886 OC_PCC_REQ_ID uint8 = 0x14 // RFC5886 OC_OF uint8 = 0x15 // RFC5541 OC_CLASSTYPE uint8 = 0x16 // RFC5455 // 0x17 is Unassigned OC_GLOBAL_CONSTRAINTS uint8 = 0x18 // RFC5557 OC_PCE_ID uint8 = 0x19 // RFC5886 OC_PROC_TIME uint8 = 0x1a // RFC5886 OC_OVERLOAD uint8 = 0x1b // RFC5886 OC_UNREACH_DESTINATION uint8 = 0x1c // RFC8306 OC_SERO uint8 = 0x1d // RFC8306 OC_SRRO uint8 = 0x1e // RFC8306 OC_BNC uint8 = 0x1f // RFC8306 OC_LSP uint8 = 0x20 // RFC8231 OC_SRP uint8 = 0x21 // RFC8231 OC_VENDOR_INFORMATION uint8 = 0x22 // RFC7470 OC_BU uint8 = 0x23 // RFC8233 OC_INTER_LAYER uint8 = 0x24 // RFC8282 OC_SWITCH_LAYER uint8 = 0x25 // RFC8282 OC_REQ_ADAP_CAP uint8 = 0x26 // RFC8282 OC_SERVER_INDICATION uint8 = 0x27 // RFC8282 OC_ASSOCIATION uint8 = 0x28 // RFC8697 OC_S2LS uint8 = 0x29 // RFC8623 OC_WA uint8 = 0x2a // RFC8780 OC_FLOWSPEC uint8 = 0x2b // draft-ietf-pce-pcep-flowspec-12 OC_CCI_OBJECT_TYPE uint8 = 0x2c // RFC9050 ) OT: identifies the PCEP object type.\nRes flags: Reserved field. This field MUST be set to zero.\nP flag (Processing-Rule)\nI flag (Ignore)\nObject Length: Specifies the total object length including the header, in bytes. The Object Length field MUST always be a multiple of 4, and at least 4. The maximum object content length is 65528 bytes.\nObjects OPEN Object Common Object Header OPEN Object-Class: 0x01 OPEN Object-Type: 0x01 Object Body Format Format (RFC5440 Figure 9: OPEN Object Format)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Ver | Flags | Keepalive | DeadTimer | SID | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | // Optional TLVs // | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype OpenObject struct { Version uint8 Flag uint8 Keepalive uint8 Deadtime uint8 Sid uint8 Tlvs []Tlv } Ver: 1\nFlags: No flags are currently defined. (RFC5440)\nKeepalive: Argument of NewOpenObject(sessionID uint8, keepalive uint8)\nDeadTimer: keepalive * 4\nSID (PCEP Session ID): Argument of NewOpenObject(sessionID uint8, keepalive uint8)\nENDPOINT Object Common Object Header ENDPOINT Object-Class: 0x04 ENDPOINT Object-Type: 0x01: IPv4 0x02: IPv6 Object Body Format Format IPv4 Endpoint (RFC5440 Figure 12: END-POINTS Object Body Format for IPv4)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Source IPv4 address | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Destination IPv4 address | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype EndpointsObject struct { ObjectType uint8 // IPv4: 1, IPv6: 2 srcIPv4 []uint8 dstIPv4 []uint8 } Source IPv4 address\nDestination IPv4 address\nNote IPv6 is not implimented\nFormat IPv6 Endpoint (RFC5440 Figure 13: END-POINTS Object Body Format for IPv6)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Source IPv6 address (16 bytes) | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Destination IPv6 address (16 bytes) | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Source IPv6 address\nDestination IPv6 address\nBANDWIDTH Object Common Object Header BANDWIDTH Object-Class: 0x05 BANDWIDTH Object-Type: 0x01: Requested bandwidth 0x02: Bandwidth of an existing TE LSP for which a reoptimization is requested. Object Body Format Format (RFC5440 Figure 14: BANDWIDTH Object Body Format)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Bandwidth | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype BandwidthObject struct { Bandwidth uint32 } Bandwidth: The requested bandwidth is encoded in 32 bits in IEEE floating point format (see IEEE.754.1985),\nMETRIC Object Common Object Header METRIC Object-Class: 0x06 METRIC Object-Type: 0x01 Object Body Format Format (RFC5440 Figure 15: METRIC Object Body Format)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved | Flags |C|B| T | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | metric-value | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype MetricObject struct { CFlag bool BFlag bool MetricType uint8 MetricValue uint32 } Reserved: This field MUST be set to zero on transmission and MUST be ignored on receipt.\nFlags: Two flags are currently defined:\nC (Computed Metric): Unimplimented B (Bound): Unimplimented ERO (Explicit Route) Object Common Object Header ERO Object-Class: 0x07 ERO Object-Type: 0x01 This object is constructed from a series of sub-objects.\nSR-ERO Subobject Object Body Format Format (RFC8664 Figure 2: SR-ERO Subobject Format)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |L| Type=36 | Length | NT | Flags |F|S|C|M| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | SID (optional) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ // NAI (variable, optional) // +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype SrEroSubobject struct { LFlag bool SubobjectType uint8 Length uint8 NaiType uint8 FFlag bool SFlag bool CFlag bool MFlag bool Sid uint32 Nai []uint8 } The L-Flag: Indicates whether the subobject represents a loose hop in the LSP.\nType: Set to 36\nNAI Type (NT): Indicates the type and format of the NAI contained in the object body, if any is present.\nNT=0: The NAI is absent. NT=1: The NAI is an IPv4 node ID. NT=2: The NAI is an IPv6 node ID. NT=3: The NAI is an IPv4 adjacency. NT=4: The NAI is an IPv6 adjacency with global IPv6 addresses. NT=5: The NAI is an unnumbered adjacency with IPv4 node IDs. NT=6: The NAI is an IPv6 adjacency with link-local IPv6 addresses. Flags:\nF: false S: false C: false M: true (MPLS) SID: The Segment Identifier, A 4-octet index defining the offset into an MPLS label spaceper [RFC8402]\nNAI: The NAI associated with the SID.\nLSPA Object Common Object Header LSPA Object-Class: 0x09 LSPA Object-Type: 0x01 Object Body Format Format (RFC5440 Figure 16: LSPA Object Body Format)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Exclude-any | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Include-any | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Include-all | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Setup Prio | Holding Prio | Flags |L| Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | // Optional TLVs // | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype LspaObject struct { ExcludeAny uint32 IncludeAny uint32 IncludeAll uint32 SetupPriority uint8 HoldingPriority uint8 LFlag bool } PCEP-ERROR Object Common Object Header PCEP-ERROR Object-Class: 0x0d PCEP-ERROR Object-Type: 0x01 Object Body Format Format (RFC5440 Figure 20: PCEP-ERROR Object Body Format)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved | Flags | Error-Type | Error-value | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | // Optional TLVs // | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Note PCEP-ERROR object body is not implimented CLOSE Objcet Common Object Header CLOSE Object-Class: 0x0f CLOSE Object-Type: 0x01 Object Body Format Format (RFC5440 Figure 22: CLOSE Object Format)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved | Flags | Reason | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | // Optional TLVs // | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Note CLOSE object body is not implimented LSP Object Common Object Header LSP Object-Class: 0x20 LSP Object-Type: 0x01 Object Body Format Format (RFC8664 Figure 11: The LSP Object Format)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | PLSP-ID | Flag | O |A|R|S|D| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ // TLVs // | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype LspObject struct { Name string SrcAddr net.IP DstAddr net.IP PlspId uint32 OFlag uint8 AFlag bool RFlag bool SFlag bool DFlag bool Tlvs []Tlv } PLSP-ID:\nFlags:\nO (Operational) 0 - DOWN: not active. 1 - UP: signaled. 2 - ACTIVE: up and carrying traffic. 3 - GOING-DOWN: LSP is being torn down, and resources are being 4 - GOING-UP: LSP is being signaled. 5-7 - Reserved: these values are reserved for future use. A (Administrative) R (Remove) S (SYNC) D (Deligate) SRP Object Common Object Header SRP Object-Class: 0x21 SRP Object-Type: 0x01 Object Body Format Format (RFC8231 Figure 10: The SRP Object Format )\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Flags | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | SRP-ID-number | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | // Optional TLVs // | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype SrpObject struct { RFlag bool SrpId uint32 // 0x00000000 and 0xFFFFFFFF are reserved. Tlvs []Tlv } Flags: None defined yet.\nSRP-ID-number: The values 0x00000000 and 0xFFFFFFFF are reserved.\nVENDOR-INFORMATION Object Common Object Header VENDOR_INFORMATION Object-Class: 0x22 VENDOR_INFORMATION Object-Type: 0x01 VENDOR-INFORMATION-TLV Type 7 Object Body Format Format (RFC7470 Figure 1: Format of the Vendor Information Object and TLV)\n0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Enterprise Number | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ~ Enterprise-Specific Information ~ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Type\ntype VendorInformationObject struct { ObjectType uint8 // vendor specific constraints: 1 EnterpriseNumber uint32 Color uint32 Preference uint32 } To specify Color for IOS XR and FRRouting, the Pola PCE uses Cisco VENDOR-INFORMATION Object (Enterprise Number: 9).\nfunc NewVendorInformationObject(vendor string, color uint32, preference uint32) VendorInformationObject { vendorInformationObject := VendorInformationObject{ // for Cisco PCC ObjectType: uint8(1), EnterpriseNumber: uint32(9), Color: color, Preference: preference, } return vendorInformationObject } ","categories":"","description":"PCEP package (pkg/packet/pcep/pcep.go).\n","excerpt":"PCEP package (pkg/packet/pcep/pcep.go).\n","ref":"/pola/docs/pce/pcep/","tags":"","title":"PCEP Package"},{"body":"","categories":"","description":"PCEP and Active Statefule PCE library.\n","excerpt":"PCEP and Active Statefule PCE library.\n","ref":"/pola/docs/pce/","tags":"","title":"PCE Library"},{"body":"","categories":"","description":"Pola PCE commands.\n","excerpt":"Pola PCE commands.\n","ref":"/pola/docs/commands/","tags":"","title":"Commands"},{"body":"Configuration Specify the IP address and port number for each PCEP and gRPC.\nglobal: pcep: address: \"192.0.2.1\" port: 4189 grpc: address: \"192.0.2.1\" port: 50051 log: path: \"/var/log/pola/\" name: \"polad.log\" Run Pola PCE using polad Start polad. Specify the created configuration file with the -f option.\n$ sudo polad -f polad.yaml 2022-06-05T22:57:59.823Z info gRPC Listen {\"listenInfo\": \"127.0.0.1:50051\", \"server\": \"grpc\"} 2022-06-05T22:57:59.823Z info PCEP Listen {\"listenInfo\": \"10.100.0.252:4189\"} ","categories":"","description":"The Pola PCE daemon.\n","excerpt":"The Pola PCE daemon.\n","ref":"/pola/docs/commands/polad/","tags":"","title":"polad"},{"body":"gRPC proto\n","categories":"","description":"Pola PCE API specification.\n","excerpt":"Pola PCE API specification.\n","ref":"/pola/docs/api/","tags":"","title":"API Specification"},{"body":" 大規模SR網の運用を効率化するネットワークコントローラの開発 (NTT Tech Conference 2022, 3/23/2022) Segment Routing用 Stateful PCEを フルスクラッチで開発した話 (ENOG 74, 6/10/2022) ","categories":"","description":"Published materials about the Pola PCE.\n","excerpt":"Published materials about the Pola PCE.\n","ref":"/pola/docs/presentations/","tags":"","title":"Presentations"},{"body":" RFC5440 - Path Computation Element (PCE) Communication Protocol (PCEP) RFC7470 - Conveying Vendor-Specific Constraints in the Path Computation Element Communication Protocol RFC8231 - Path Computation Element Communication Protocol (PCEP) Extensions for Stateful PCE RFC8408 - Conveying Path Setup Type in PCE Communication Protocol (PCEP) Messages RFC8664 - Path Computation Element Communication Protocol (PCEP) Extensions for Segment Routing ","categories":"","description":"List of RFCs and Internet-Drafts to which the Pola PCE conforms.\n","excerpt":"List of RFCs and Internet-Drafts to which the Pola PCE conforms.\n","ref":"/pola/docs/reference/","tags":"","title":"Reference List"},{"body":"Contributors\n","categories":"","description":"Contributors of Pola PCE.\n","excerpt":"Contributors of Pola PCE.\n","ref":"/pola/docs/contributers/","tags":"","title":"Contributors"},{"body":"License\nCredits by gocredits\n","categories":"","description":"License for Pola PCE and credits for libraries.\n","excerpt":"License for Pola PCE and credits for libraries.\n","ref":"/pola/docs/lisence/","tags":"","title":"Lisence \u0026 Credits"},{"body":"These page is a user guide for the Pola PCE.\nThe Getting Started page explains how to install the Pola PCE daemon and start the Stateful PCE service.\nThe Tinet Example page, a Pola PCE example network can be created with Tinet, a docker-based network simulator.\n","categories":"","description":"PCEP Library and Stateful PCE Implementation with Go \n","excerpt":"PCEP Library and Stateful PCE Implementation with Go \n","ref":"/pola/docs/","tags":"","title":"Pola PCE"},{"body":"Command Reference pola session [-j] Displays the peer addresses of the active session.\njson formatted response\n{ \"peers\": [ { \"address\": \"192.0.2.1\", \"status\": \"active\", }, { \"address\": \"192.0.2.2\", \"status\": \"active\", }, ] } pola lsp list [-j] Displays the lsp list managed by polad.\njson formatted response\n{ \"lsps\": [ { \"dstAddr\": \"192.0.2.1\", \"path\": [ 16003, 16001 ], \"peerAddr\": \"192.0.2.1\", \"policyName\": \"sample_policy1\", \"srcAddr\": \"192.0.2.2\" }, { \"dstAddr\": \"192.0.2.1\", \"path\": null, \"peerAddr\": \"192.0.2.2\", \"policyName\": \"sample_policy2\", \"srcAddr\": \"192.0.2.2\" }, { \"dstAddr\": \"192.0.2.2\", \"path\": [ 16003, 16002 ], \"peerAddr\": \"192.0.2.1\", \"policyName\": \"sample_policy3\", \"srcAddr\": \"192.0.2.1\" } ] } ※ want to change to this format later.\n{ \"peers\": [ { \"peerAddr\": \"192.0.2.1\", \"lsps\": [ { \"policyName\": \"sample_policy1\", \"srcAddr\": \"192.0.2.1\", \"dstAddr\": \"192.0.2.2\", \"segmentlist\": [ 16003, 16002 ] }, { \"policyName\": \"sample_policy2\", \"srcAddr\": \"192.0.2.1\", \"dstAddr\": \"192.0.2.2\", \"segmentlist\": [ 16003, 16001, 16002 ] }, ] }, { \"peerAddr\": \"192.0.2.2\", \"lsps\": [ { \"policyName\": \"sample_policy3\", \"srcAddr\": \"192.0.2.2\", \"dstAddr\": \"192.0.2.1\", \"segmentlist\": [ 16003, 16001 ] }, { \"policyName\": \"sample_policy4\", \"srcAddr\": \"192.0.2.2\", \"dstAddr\": \"192.0.2.1\", \"segmentlist\": [ 16003, 16002, 16001 ] }, ] }, ] pola lsp list -f filepath Create a new SR-Policy\nyaml input format\nsrPolicy: name: name peerAddr: 192.0.2.1 srcAddr: 192.0.2.1 dstAddr: 192.0.2.2 color: 100 segmentlist: - sid: 16003 nai: 192.0.2.3 - sid: 16002 nai: 192.0.2.2 json formatted response\n{ \"status\": \"success\" } ","categories":"","description":"The gRPC client of Pola PCE.\n","excerpt":"The gRPC client of Pola PCE.\n","ref":"/pola/docs/commands/pola/","tags":"","title":"pola"},{"body":"","categories":"","description":"","excerpt":"","ref":"/pola/categories/","tags":"","title":"Categories"},{"body":" Pola PCE PCEP Library and Stateful PCE Implementation with Go Learn More Download Microservice Implementation based on Microservice architecture, integration with external services via gRPC API.\nStandard Implimentation RFC-compliant standard implementation, multi-vendor interoperability.\nOpen Source Please fork the repository and create a pull-request. We welcome and appreciate your contribution.\n","categories":"","description":"","excerpt":" Pola PCE PCEP Library and Stateful PCE Implementation with Go Learn …","ref":"/pola/","tags":"","title":"Pola PCE"},{"body":"","categories":"","description":"","excerpt":"","ref":"/pola/tags/","tags":"","title":"Tags"}]